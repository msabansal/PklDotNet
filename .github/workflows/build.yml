name: Build Apple Pkl Packages

on:
  # Trigger on new releases in the Apple Pkl repository
  repository_dispatch:
    types: [pkl-release]
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Override version to build'
        required: true
        default: '0.0.1'
        type: string
      publish:
        description: 'Tag and Publish'
        required: false
        default: false
        type: boolean
  
permissions:
  contents: write

jobs:
  prepare-version:
    name: Prepare Version
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.get_latest_version.outputs.latest_version }}
      package_version: ${{ steps.determine_version.outputs.package_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Check for new Pkl releases
        id: get_latest_version
        run: |
          # Get the latest tag from Pkl repository using GitHub API
          echo "Fetching latest Pkl release tag..."
          LATEST_TAG_INFO=$(curl -s https://api.github.com/repos/apple/pkl/releases/latest)
          LATEST_VERSION=$(echo "$LATEST_TAG_INFO" | jq -r '.tag_name')
          RELEASE_DATE=$(echo "$LATEST_TAG_INFO" | jq -r '.published_at')
          
          echo "Latest Pkl version: $LATEST_VERSION"
          echo "Published: $RELEASE_DATE"
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Determine package version
        id: determine_version
        run: |
          LATEST_VERSION=${{ steps.get_latest_version.outputs.latest_version }}
          echo "Latest version: $LATEST_VERSION"

          VERSION_OVERRIDE="${{ github.event.inputs.version_override }}"
          
          if [[ -n "$VERSION_OVERRIDE" ]]; then
            echo "Using version override: $VERSION_OVERRIDE"
            PACKAGE_VERSION="$VERSION_OVERRIDE"
          else
            PACKAGE_VERSION="$LATEST_VERSION"
          fi
          
          echo "Package version will be: $PACKAGE_VERSION"
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

  build-cli-package:
    name: Build Apple Pkl CLI (${{ matrix.rid }})
    runs-on: ubuntu-22.04
    needs: prepare-version

    strategy:
      # should be the full list of supported RIDs with customizations expressed via the parameters under each item
      matrix:
        rid:
          - win-x64
          - linux-x64
          - linux-musl-x64
          - osx-x64
          - linux-arm64
          - osx-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

    # Downgrade to ubuntu 22.04 as it has mono already installed
    #   - name: Install mono (Linux)
    #     if: runner.os == 'Linux'
    #     run: sudo apt update && sudo apt install mono-complete

      - name: Build Apple Pkl CLI binary
        run: |
          echo "Building Apple Pkl CLI binary for ${{ matrix.rid }}..."
          dotnet build /p:version="${{needs.prepare-version.outputs.package_version}}" /p:BinaryVersion="${{needs.prepare-version.outputs.latest_version}}" ./Apple.Pkl.Cli/Apple.Pkl.Cli.csproj /p:RuntimeSuffix=${{ matrix.rid }} /p:Configuration=Release

      - name: Upload CLI Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cli-package-${{ matrix.rid }}
          path: ./Apple.Pkl.Cli/bin/Release/net8.0/Apple.Pkl.Cli.${{ matrix.rid }}.${{ needs.prepare-version.outputs.package_version }}.nupkg

  build-msbuild-package:
    name: Build Apple Pkl MSBuild Package
    runs-on: ubuntu-latest
    needs: prepare-version
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
          
      - name: Build Apple Pkl MSBuild binary
        run: |
          echo "Building Apple Pkl MSBuild package..."
          dotnet pack /p:version="${{needs.prepare-version.outputs.package_version}}" --configuration Release ./Apple.Pkl.MSBuild/Apple.Pkl.MSBuild.csproj

      - name: Upload MSBuild Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: msbuild-package
          path: ./Apple.Pkl.MSBuild/bin/Release/Apple.Pkl.MSBuild.${{ needs.prepare-version.outputs.package_version }}.nupkg

  run-e2e-tests:
    name: Run E2E Tests
    if: false  # temporarily disable E2E tests to speed up the workflow
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rid: linux-x64
          - os: windows-latest
            rid: win-x64
          - os: macos-latest
            rid: osx-x64
          - os: macos-latest
            rid: osx-arm64
          - os: ubuntu-24.04-arm
            rid: linux-arm64
          - os: ubuntu-latest
            rid: linux-musl-x64
    runs-on: ${{ matrix.os }}
    needs: [prepare-version, build-cli-package, build-msbuild-package]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download CLI artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cli-package-${{ matrix.rid }}
          path: ./tests/e2e/local-packages/
          merge-multiple: true

      - name: Download MSBuild artifacts  
        uses: actions/download-artifact@v4
        with:
          pattern: msbuild-package
          path: ./tests/e2e/local-packages/
          merge-multiple: true
          
      - name: Run E2E Tests
        shell: bash
        env:
          PACKAGE_VERSION: ${{ needs.prepare-version.outputs.package_version }}
          RuntimeSuffix: ${{ matrix.rid }}
        run: |
          echo "Running E2E tests with package version $PACKAGE_VERSION..."
          cd ./tests/e2e
          npm install
          npm run test

  tag-and-release:
    name: Tag and Release
    runs-on: ubuntu-latest
    needs: [prepare-version, build-cli-package, build-msbuild-package, run-e2e-tests]
    if: github.event.inputs.publish == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create and Push Github tag
        id: create_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PACKAGE_VERSION="${{needs.prepare-version.outputs.package_version}}"
          
          echo "Creating and pushing tag v$PACKAGE_VERSION..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag --force -a "v$PACKAGE_VERSION" -m "Release version $PACKAGE_VERSION" 
          git push -f origin "v$PACKAGE_VERSION"

      - name: Download CLI artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cli-package-*
          path: ./artifacts/
          merge-multiple: true

      - name: Download MSBuild artifacts  
        uses: actions/download-artifact@v4
        with:
          pattern: msbuild-package
          path: ./artifacts/
          merge-multiple: true
          
      - name: Release Packages
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{needs.prepare-version.outputs.package_version}}
          files: |
            ./artifacts/*.nupkg

      - name: Push Packages to NuGet.org
        env:
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
        run: |
          for package in ./artifacts/*.nupkg; do
            if [ -f "$package" ]; then
              echo "Pushing $package to NuGet..."
              dotnet nuget push --skip-duplicate "$package" -k $NUGET_KEY -s https://api.nuget.org/v3/index.json
            fi
          done
        